<?php declare(strict_types=1);

use Hyva\Theme\Model\ViewModelRegistry;
use Hyva\Theme\ViewModel\HyvaCsp;
use Magento\Framework\Escaper;
use Magento\Framework\View\Element\Template;
use MageOS\ThemeOptimization\ViewModel\BfCache;

/** @var Template $block */
/** @var Escaper $escaper */
/** @var ViewModelRegistry $viewModels */
/** @var HyvaCsp $hyvaCsp */
/** @var BfCache $bfcacheConfig */
$bfcacheConfig = $viewModels->require(BfCache::class);
$isCustomerLoggedIn = $bfcacheConfig->isCustomerLoggedIn() ? 'true' : 'false';
$enableUserInteractionRefresh = $bfcacheConfig->isReloadMiniCartOnInteraction() ? 'true' : 'false';
$autoCloseMenuMobile = $bfcacheConfig->autoCloseMenuMobile() ? 'true' : 'false';
?>

<script>
(() => {
    class BFCacheHandler {
        constructor() {
            this.options = {
                isCustomerLoggedIn: <?= $isCustomerLoggedIn ?>,
                enableUserInteractionRefreshMiniCart: <?= $enableUserInteractionRefresh ?>,
                autoCloseMenuMobile: <?= $autoCloseMenuMobile ?>
            };

            this.userInteractionEvents = ['touchstart', 'mouseover', 'wheel', 'scroll', 'keydown'];
            this._reloadTriggered = false;
            this.dom = {};

            // Centralized selectors for reuse
            this.selectors = {
                cartDrawer: "[x-data^='initCartDrawer']",
                mobileMenu: "[x-data^='initMenuMobile']",
                desktopMenu: "[x-data^='initMenuDesktop']"
            };
        }

        <?php
        /**
         * Safe DOM getter with caching (re-queries only if element removed)
         */ ?>
        getElement(key) {
            const cached = this.dom[key];
            if (cached && document.contains(cached)) return cached;
            const el = document.querySelector(this.selectors[key]);
            if (el) this.dom[key] = el;
            return el;
        }

        init() {
            this.refreshMiniCart();
            this.reloadCustomerLoginPage();
            this.actionAutoCloseMenu(this.options.autoCloseMenuMobile);
        }

        <?php
        /**
         * Refresh minicart on user interaction or immediately
         */ ?>
        refreshMiniCart() {
            if (this.options.enableUserInteractionRefreshMiniCart) {
                this.refreshMiniCartOnUserInteraction();
            } else {
                this.actionRefreshMiniCart();
            }
        }

        refreshMiniCartOnUserInteraction() {
            const refreshMiniCart = () => {
                this.userInteractionEvents.forEach(eventType =>
                    window.removeEventListener(eventType, refreshMiniCart)
                );
                this.actionRefreshMiniCart();
            };
            const opts = { once: true, passive: true };
            this.userInteractionEvents.forEach(eventType =>
                window.addEventListener(eventType, refreshMiniCart, opts)
            );
        }

        <?php
        /**
         * Compare frontend & backend login state and reload if mismatched
         */ ?>
        reloadCustomerLoginPage() {
            const backendLoggedInState = this.options.isCustomerLoggedIn;

            let customerData = null;
            try {
                const cacheStorage = localStorage.getItem('mage-cache-storage');
                if (cacheStorage) {
                    customerData = JSON.parse(cacheStorage).customer || null;
                }
            } catch {
                // Ignore parse errors silently
            }

            const frontendLoggedInState = Boolean(customerData?.firstname);

            if (frontendLoggedInState !== backendLoggedInState && !this._reloadTriggered) {
                this._reloadTriggered = true;
                window.location.reload();
            }
        }

        <?php
        /**
         * Dispatch Magento event to refresh customer sections (minicart, etc.)
         */ ?>
        actionRefreshMiniCart() {
            window.dispatchEvent(new CustomEvent('reload-customer-section-data'));
        }

        <?php
        /**
         * Close cart drawer & optionally close mobile/desktop menus
         */ ?>
        actionAutoCloseMenu(autoCloseMenuMobile) {
            window.dispatchEvent(new Event('clear-messages'));

            const cartDrawer = this.getElement('cartDrawer');
            if (cartDrawer && typeof Alpine !== 'undefined') {
                requestAnimationFrame(() => {
                    const cartDrawerData = Alpine.$data(cartDrawer);
                    if (cartDrawerData?.open !== undefined) {
                        cartDrawerData.open = false;
                        document.body.style.overflow = '';
                    }
                });
            }

            if (autoCloseMenuMobile) {
                this.handleMenuClosure();
            }
        }

        <?php
        /**
         * Handle closing of mobile & desktop menus via Alpine.js
         */ ?>
        handleMenuClosure() {
            if (typeof Alpine === 'undefined' || !Alpine.$data) return;

            const mobileMenu = this.getElement('mobileMenu');
            if (mobileMenu) {
                const mobileMenuData = Alpine.$data(mobileMenu);
                if (mobileMenuData?.open !== undefined) {
                    mobileMenuData.open = false;
                }
            }

            const desktopMenu = this.getElement('desktopMenu');
            if (desktopMenu) {
                const desktopMenuData = Alpine.$data(desktopMenu);
                if (desktopMenuData?.hoverPanelActiveId !== undefined) {
                    desktopMenuData.hoverPanelActiveId = 0;
                }
            }
        }
    }

    <?php
    /**
     * Page restoration handler — persistent global instance
     */ 
    // --- Initialization with full browser coverage ---?>
    const initHandler = () => (window._bfcacheHandler ??= new BFCacheHandler()).init();

    <?php // 1️⃣ Chrome / Firefox / Safari / Edge — BFCache restore ?>
    window.addEventListener('pageshow', (event) => {
        const navType = performance.getEntriesByType('navigation')[0]?.type;
        if (event.persisted || navType === 'back_forward') {
            initHandler();
        }
    }, { passive: true });

    <?php // 2️⃣ Chrome / Edge — prerendering API ?>
    if ('prerendering' in document || 'onprerenderingchange' in document) {
        document.addEventListener('prerenderingchange', () => {
            if (!window._bfcacheHandler?._initialized) {
                window._bfcacheHandler = new BFCacheHandler();
                window._bfcacheHandler._initialized = true;
                window._bfcacheHandler.init();
            }
        }, { passive: true });
    }

    <?php // 3️⃣ Safari / Legacy fallback — visibilitychange ?>
    document.addEventListener('visibilitychange', () => {
        if (document.visibilityState === 'visible' && !window._bfcacheHandler?._initialized) {
            window._bfcacheHandler = new BFCacheHandler();
            window._bfcacheHandler._initialized = true;
            window._bfcacheHandler.init();
        }
    }, { passive: true });
})();
</script> 
<?php $hyvaCsp->registerInlineScript() ?>
<?php /** The $hyvaCsp->registerInlineScript() has to be called directly after the closing script tag! There must be no other HTML in between. */ ?>
