<?php declare(strict_types=1);

use Magento\Framework\Escaper;
use Magento\Framework\View\Element\Template;
use Magento\Framework\View\Helper\SecureHtmlRenderer;
use MageOS\ThemeOptimization\ViewModel\BfCache as BfCacheViewModel;

/** @var Template $block */
/** @var BfCacheViewModel $bfcacheConfig */
/** @var Escaper $escaper */
/** @var SecureHtmlRenderer $secureRenderer */

$bfcacheConfig = $block->getData('bfcache_config');
$isCustomerLoggedIn = $bfcacheConfig->isCustomerLoggedIn() ? 'true' : 'false';
$enableUserInteractionRefresh = $bfcacheConfig->isReloadMiniCartOnInteraction() ? 'true' : 'false';
$autoCloseMenuMobile = $bfcacheConfig->autoCloseMenuMobile() ? 'true' : 'false';

$script = <<<JS
    (() => {
        class BFCacheHandler {
            constructor() {
                this.options = {
                    isCustomerLoggedIn: {$isCustomerLoggedIn},
                    enableUserInteractionRefreshMiniCart: {$enableUserInteractionRefresh},
                    autoCloseMenuMobile: {$autoCloseMenuMobile}
                };
    
                this.userInteractionEvents = ['touchstart', 'mouseover', 'wheel', 'scroll', 'keydown'];
                this._reloadTriggered = false;
                this.dom = {};
    
                // Centralized selectors for reuse
                this.selectors = {
                    minicartCloseButton: '#btn-minicart-close',
                    htmlElement: 'html'
                };
            }
    
            /**
             * Safe DOM getter with caching (re-queries only if element removed)
             */
            getElement(key) {
                const cached = this.dom[key];
                if (cached && document.contains(cached)) return cached;
                const el = document.querySelector(this.selectors[key]);
                if (el) this.dom[key] = el;
                return el;
            }
    
            init() {
                this.refreshMiniCart();
                this.reloadCustomerLoginPage();
                this.actionAutoCloseMenu(this.options.autoCloseMenuMobile);
            }
    
            /**
             * Refresh minicart on user interaction or immediately
             */
            refreshMiniCart() {
                if (this.options.enableUserInteractionRefreshMiniCart) {
                    this.refreshMiniCartOnUserInteraction();
                } else {
                    this.actionRefreshMiniCart();
                }
            }
    
            refreshMiniCartOnUserInteraction() {
                const refreshMiniCart = () => {
                    this.userInteractionEvents.forEach(eventType =>
                        window.removeEventListener(eventType, refreshMiniCart)
                    );
                    this.actionRefreshMiniCart();
                };
                const opts = { once: true, passive: true };
                this.userInteractionEvents.forEach(eventType =>
                    window.addEventListener(eventType, refreshMiniCart, opts)
                );
            }
    
            /**
             * Compare frontend & backend login state and reload if mismatched
             */
            reloadCustomerLoginPage() {
                const backendLoggedInState = this.options.isCustomerLoggedIn;
    
                let customerData = null;
                try {
                    const cacheStorage = localStorage.getItem('mage-cache-storage');
                    if (cacheStorage) {
                        customerData = JSON.parse(cacheStorage).customer || null;
                    }
                } catch {
                    // Ignore parse errors silently
                }
    
                const frontendLoggedInState = Boolean(customerData?.firstname);
    
                if (frontendLoggedInState !== backendLoggedInState && !this._reloadTriggered) {
                    this._reloadTriggered = true;
                    window.location.reload();
                }
            }
    
            /**
             * Dispatch Magento event to refresh customer sections (minicart, etc.)
             */
            actionRefreshMiniCart() {
                require([
                    'Magento_Customer/js/customer-data'
                ], function (customerData) {
                    customerData.reload(['cart'], true);
                });
            }
    
            /**
             * Close minicart & optionally close mobile menu
             */
            actionAutoCloseMenu(autoCloseMenuMobile) {
                require([
                    'Magento_Customer/js/customer-data'
                ], ((customerData) => {
                    customerData.reload(['messages'], true);
    
                    const minicartCloseButton = document.querySelector(this.selectors.minicartCloseButton);
                    if (minicartCloseButton) {
                        minicartCloseButton.click();
                    }
    
                    if (autoCloseMenuMobile) {
                        this.handleMenuClosure();
                    }
                }).bind(this));
            }
    
            /**
             * Handle closing of mobile menu
             */
            handleMenuClosure() {
                const htmlElement = document.querySelector(this.selectors.htmlElement);
    
                const navigationClasses = ['nav-open', 'nav-before-open'];
                navigationClasses.forEach(className => {
                    if (htmlElement.classList.contains(className)) {
                        htmlElement.classList.remove(className);
                    }
                });
            }
        }
    
        /**
         * Page restoration handler — persistent global instance
         */
		const initHandler = () => (window._bfcacheHandler ??= new BFCacheHandler()).init();
		
		// 1️⃣ Chrome / Firefox / Safari / Edge — BFCache restore
		
        window.addEventListener('pageshow', (event) => {
        const navType = performance.getEntriesByType('navigation')[0]?.type;
        if (event.persisted || navType === 'back_forward') {
            initHandler();
        }
        }, { passive: true });
		
		// 2️⃣ Chrome / Edge — prerendering API
		if ('prerendering' in document || 'onprerenderingchange' in document) {
			document.addEventListener('prerenderingchange', () => {
				if (!window._bfcacheHandler?._initialized) {
					window._bfcacheHandler = new BFCacheHandler();
					window._bfcacheHandler._initialized = true;
					window._bfcacheHandler.init();
				}
			}, { passive: true });
		}
		
		// 3️⃣ Safari / Legacy fallback — visibilitychange
		
		document.addEventListener('visibilitychange', () => {
			if (document.visibilityState === 'visible' && !window._bfcacheHandler?._initialized) {
				window._bfcacheHandler = new BFCacheHandler();
				window._bfcacheHandler._initialized = true;
				window._bfcacheHandler.init();
			}
		}, { passive: true });

    })();
    JS;
?>
<?= /* @noEscape */ $secureRenderer->renderTag('script', ['type' => 'text/javascript'], $script, false) ?>
